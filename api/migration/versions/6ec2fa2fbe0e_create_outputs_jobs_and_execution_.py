"""create outputs, jobs, and execution_states tables

Revision ID: 6ec2fa2fbe0e
Revises:
Create Date: 2025-07-11 17:02:51.394297

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6ec2fa2fbe0e"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "outputs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("url", sa.Text(), nullable=False),
        sa.Column("tag", sa.String(length=50), nullable=False),
        sa.Column("value", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("usage_count", sa.Integer(), nullable=True),
        sa.Column("last_used_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("url", "tag", name="outputs_url_tag_unique"),
    )
    op.create_index(
        "idx_outputs_popularity", "outputs", ["usage_count", "last_used_at"], unique=False, postgresql_using="btree"
    )
    op.create_index("idx_outputs_tag", "outputs", ["tag"], unique=False)
    op.create_index(
        "idx_outputs_url_pattern",
        "outputs",
        [sa.literal_column("to_tsvector('english', url)")],
        unique=False,
        postgresql_using="gin",
    )
    op.create_table(
        "execution_states",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("request_number", sa.Integer(), nullable=False),
        sa.Column("last_response", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_executed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("output_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["output_id"],
            ["outputs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_execution_states_last_executed", "execution_states", ["last_executed_at"], unique=False)
    op.create_index("idx_execution_states_output_id", "execution_states", ["output_id"], unique=False)
    op.create_table(
        "jobs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("url", sa.Text(), nullable=False),
        sa.Column("tag", sa.String(length=50), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("message", sa.Text(), nullable=True),
        sa.Column("analysis_metadata", postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("execution_state_id", sa.UUID(), nullable=True),
        sa.CheckConstraint("status IN ('pending', 'ready', 'failed')", name="job_status_check"),
        sa.ForeignKeyConstraint(
            ["execution_state_id"],
            ["execution_states.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("jobs")
    op.drop_index("idx_execution_states_output_id", table_name="execution_states")
    op.drop_index("idx_execution_states_last_executed", table_name="execution_states")
    op.drop_table("execution_states")
    op.drop_index("idx_outputs_url_pattern", table_name="outputs", postgresql_using="gin")
    op.drop_index("idx_outputs_tag", table_name="outputs")
    op.drop_index("idx_outputs_popularity", table_name="outputs", postgresql_using="btree")
    op.drop_table("outputs")
    # ### end Alembic commands ###
